cmake_minimum_required(VERSION 3.8 FATAL_ERROR)
project(GL-Framework LANGUAGES CXX)

set(WITH_ASSIMP ON CACHE BOOL "Build with assimp")
set(WITH_OPENMESH ON CACHE BOOL "Build with OpenMesh")
option(BUILD_FRAMEWORK_TEST "Build framework tests" OFF)

# Find Opengl libs
find_package(OpenGL REQUIRED)
find_package(glad REQUIRED)
find_package(glfw3 REQUIRED)
find_package(glm REQUIRED)

# Find OpenMesh (if requested)
if(${WITH_OPENMESH})
	find_package(OpenMesh QUIET)
	if(NOT ${OpenMesh_FOUND})
		message(STATUS "Did not find OpenMesh, turning it off")
		set(WITH_OPENMESH OFF CACHE BOOL "Build with OpenMesh" FORCE)
	endif()
endif()

if(${WITH_ASSIMP})
	find_package(ASSIMP QUIET)
	if(NOT ${ASSIMP_FOUND})
		message(STATUS "Did not find Assimp, turning off")
		set(WITH_ASSIMP OFF CACHE BOOL "Build with assimp" FORCE)
	endif()
endif()

set(INCLUDE_DIR include/glpp)

# Gather Imgui
set(IMGUI_DIR ${PROJECT_SOURCE_DIR}/imgui)
# Set the imgui sources
file(GLOB IMGUI_SRC ${IMGUI_DIR}/*.h ${IMGUI_DIR}/*.cpp)
# Add glfw impl
set(IMGUI_SRC 
	${IMGUI_SRC}
	# Implementation
	${IMGUI_DIR}/examples/imgui_impl_opengl3.h
	${IMGUI_DIR}/examples/imgui_impl_opengl3.cpp
	${IMGUI_DIR}/examples/imgui_impl_glfw.h
	${IMGUI_DIR}/examples/imgui_impl_glfw.cpp
	# Custom extensions
	${INCLUDE_DIR}/imgui.hpp
	${INCLUDE_DIR}/imgui_ext.hpp
	src/imgui_ext.cpp)

set(MESH_FILES
	${INCLUDE_DIR}/meshes.hpp
	${INCLUDE_DIR}/meshes/mesh.hpp
	src/meshes/mesh.cpp
	${INCLUDE_DIR}/meshes/triangle_mesh.hpp
	src/meshes/triangle_mesh.cpp
	${INCLUDE_DIR}/meshes/coordinate_frame.hpp
	src/meshes/coordinate_frame.cpp
	${INCLUDE_DIR}/meshes/splinecurves.hpp
	src/meshes/splinecurves.cpp
	${INCLUDE_DIR}/meshes/pointcloud.hpp
	src/meshes/pointcloud.cpp)

set(IMGUI_3D_FILES
	${INCLUDE_DIR}/imgui3d/imgui_3d.h
	${INCLUDE_DIR}/imgui3d/imgui_3d_utils.h
	src/imgui3d/imgui_3d_utils.cpp
	${INCLUDE_DIR}/imgui3d/imgui_3d_geometry.h
	src/imgui3d/imgui_3d.cpp
	src/imgui3d/imgui_3d_widgets.cpp
	${INCLUDE_DIR}/imgui3d/imgui_3d_editor_widgets.h
	src/imgui3d/imgui_3d_editor_widgets.cpp
	${INCLUDE_DIR}/imgui3d/imgui_3d_surfaces.h
	src/imgui3d/imgui_3d_surfaces.cpp
	src/imgui3d/imgui_3d_draw.cpp)

set(IMGUI_FILES ${IMGUI_SRC})

SET(RENDER_2D_FILES
	${INCLUDE_DIR}/2d/canvas.hpp
	src/2d/canvas.cpp
	${INCLUDE_DIR}/2d/eventsystem.hpp
	src/2d/eventsystem.cpp
	${INCLUDE_DIR}/2d/sprite.hpp
	src/2d/sprite.cpp
	
	${INCLUDE_DIR}/2d/handles.hpp
	src/2d/handles.cpp
	${INCLUDE_DIR}/2d/selector.hpp
	src/2d/selector.cpp)

set(GL_FILES
	${MESH_FILES}
	${INCLUDE_DIR}/texture.hpp
	src/texture.cpp
	${INCLUDE_DIR}/framebuffer.hpp
	src/framebuffer.cpp
	${INCLUDE_DIR}/draw_batch.hpp
	${INCLUDE_DIR}/draw_batch.inl.hpp
	src/draw_batch.cpp
	${INCLUDE_DIR}/intermediate.h
	${INCLUDE_DIR}/intermediate.inl.h
	src/intermediate.cpp
	${INCLUDE_DIR}/variadic_buffer.hpp
	${INCLUDE_DIR}/shadermanager.hpp
	${INCLUDE_DIR}/shadermanager.inl.hpp
	src/shadermanager.cpp
	${INCLUDE_DIR}/controls.hpp
	src/controls.cpp
	${INCLUDE_DIR}/renderer.hpp
	src/renderer.cpp
	${INCLUDE_DIR}/offscreen_renderer.hpp
	src/offscreen_renderer.cpp
	${INCLUDE_DIR}/camera.hpp
	${INCLUDE_DIR}/buffers.hpp
	src/buffers.cpp
	${INCLUDE_DIR}/gl_internal.hpp
	${INCLUDE_DIR}/uiwindow.hpp
	src/uiwindow.cpp
	${INCLUDE_DIR}/IconsFontAwesome5.h)

	
source_group("Meshes" FILES ${MESH_FILES})
source_group("Dear Imgui" FILES ${IMGUI_FILES})
source_group("Dear Imgui 3D" FILES ${IMGUI_3D_FILES})
source_group("2D rendering" FILES ${RENDER_2D_FILES})

add_library(glframework STATIC ${GL_FILES} ${IMGUI_FILES} ${IMGUI_3D_FILES} ${RENDER_2D_FILES})
target_link_libraries(glframework PUBLIC ${OPENGL_gl_LIBRARY} glfw glad::glad glm)
target_compile_definitions(glframework PUBLIC -DIMGUI_IMPL_OPENGL_LOADER_GLAD)
if(${WITH_OPENMESH})
	target_link_libraries(glframework PUBLIC OpenMeshCore)
	target_compile_definitions(glframework PUBLIC -D_USE_MATH_DEFINES -DWITH_OPENMESH)
#	target_sources(glframework PRIVATE src/openmesh_ext.h ${OPENMESH_EXT)
	target_sources(glframework PRIVATE
		${INCLUDE_DIR}/meshes/openmesh_mesh.hpp
		${INCLUDE_DIR}/openmesh_ext.hpp
		src/meshes/openmesh_mesh.cpp)
endif()
if(${WITH_ASSIMP})
	target_link_libraries(glframework PUBLIC ${ASSIMP_LIBRARIES})
	target_link_directories(glframework PUBLIC ${ASSIMP_INCLUDE_DIRECTORIES})
	target_link_directories(glframework PUBLIC ${ASSIMP_LIBRARY_DIRS})
	target_compile_definitions(glframework PUBLIC -DWITH_ASSIMP -D_USE_MATH_DEFINES)
endif()

target_compile_definitions(glframework PUBLIC -DGL_FRAMEWORK_SHADER_DIR="${PROJECT_SOURCE_DIR}/shaders/")
target_compile_definitions(glframework PUBLIC -DGL_FRAMEWORK_FONT_DIR="${PROJECT_SOURCE_DIR}/fonts/")
target_compile_definitions(glframework PUBLIC -DGLM_ENABLE_EXPERIMENTAL)
target_compile_features(glframework PRIVATE cxx_std_17)
	
target_include_directories(glframework PUBLIC 
	$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
	$<BUILD_INTERFACE:${IMGUI_DIR}>
	$<BUILD_INTERFACE:${IMGUI_DIR}/examples>
	${OPENGL_INCLUDE_DIRS} 
	${GLM_INCLUDE_DIRS})

if(${BUILD_FRAMEWORK_TEST})
	add_subdirectory(test/)
endif()